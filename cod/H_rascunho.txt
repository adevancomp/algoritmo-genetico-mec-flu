cd cod && gcc -c trelica.c -o trelica.o && gcc oficial.c trelica.o -lm  -o oficial
./oficial

inicializa_casos_de_teste();
    printf("\n=== Casos de teste ======\n");
    for(int i=0;i<NUM_CASOS_TESTE;i++)
    {
        printf("## Caso de teste [%d]##\n",i);
        printf("Barra L(m)  N(kN)     n(kN)   Delta (mm)\n");
        for(int j=0;j<NUM_BARRAS;j++)
        {
            printf("%2.d  %6.3f %7.3f  %7.3f   %7.2E\n",j+1,casos_de_teste[i].barras[j],casos_de_teste[i].FN[j],casos_de_teste[i].VFN[j],casos_de_teste[i].DY[j]);
        }
        printf("Deslocamento Final: %.4f mm\n",casos_de_teste[i].desloc_C);
        printf("\n\n");
    }
    printf("Antes da ordenação:\n");
    for(int i=0;i<NUM_CASOS_TESTE;i++){
        printf("Treliça %d deslocamento:%.4f\n",i,casos_de_teste[i].desloc_C);
    }
    qsort(casos_de_teste,NUM_CASOS_TESTE,sizeof(trelica),compare);
    printf("Depois da ordenação:\n");
    for(int i=0;i<NUM_CASOS_TESTE;i++){
        printf("Treliça %d deslocamento:%.4f\n",i,casos_de_teste[i].desloc_C);
    }

for(int i=0;i<TAM_POPULACAO;i++){
        exibir_individuo(&lista_individuos[i]);
    }
    for(int i=0;i<TAM_POPULACAO;i++){
        printf("%.3f  ",lista_individuos[i].nota);
    }
    printf("\n\n\n");
    qsort(lista_individuos,TAM_POPULACAO,sizeof(individuo),compare_individuo);
    for(int i=0;i<TAM_POPULACAO;i++){
        printf("%.3f  ",lista_individuos[i].nota);
    }
    /*Pega um exemplo, o indivíduo 0*/
    printf("\nIndivíduo 0 antes da mutação");
    individuo* ind = &(lista_individuos[0]);
    exibir_individuo(ind);
    printf("Agora vou aplicar a mutação\n");
    printf("Foi aplicado a mutação ? %d\n",mutacao(ind));
    exibir_individuo(ind);

printf("Indíviduo 1");
    exibir_individuo(&lista_individuos[0]);
    printf("Indivíduo 2");
    exibir_individuo(&lista_individuos[1]);
    individuo filho1,filho2;
    double F_novo[] = {10,10,10,10,10};
    /*Cada indivíduo irá receber:
    dois cromossomos, nota e 
    a geração 0, inicialmente*/
    for(int i=0;i<TAM_CROMOSSOMO1;i++)
    {
        filho1.cromossomo1[i]=barra_comprimento_rand();
        filho2.cromossomo1[i]=barra_comprimento_rand();
    }
    for(int i=0;i<TAM_CROMOSSOMO2;i++)
    {
        filho1.cromossomo2[i]=barra_area_rand();
        filho2.cromossomo2[i]=barra_area_rand();
    }
    constroe_trelica(&(filho1.t),filho1.cromossomo1,filho1.cromossomo2,F_novo);
    constroe_trelica(&(filho2.t),filho2.cromossomo1,filho2.cromossomo2,F_novo);
    fitness(&filho1);
    fitness(&filho2);
    crossover(&(lista_individuos[0]),&(lista_individuos[1]),&filho1,&filho2);
    printf("\n=== Cromossomo 1 ===\n");
    printf("   Pai 1       Pai 2      Filho 1    Filho 2\n");
    for(int i=0;i<TAM_CROMOSSOMO1;i++)
    {
        printf("%6.2e %6.2e %6.2e %6.2e\n",lista_individuos[0].cromossomo1[i],lista_individuos[1].cromossomo1[i],filho1.cromossomo1[i],filho2.cromossomo1[i]);
    }
    printf("\n=== Cromossomo 2 ===\n");
    printf("   Pai 1       Pai 2      Filho 1    Filho 2\n");
    for(int i=0;i<TAM_CROMOSSOMO2;i++)
    {
        printf("%6.2e %6.2e %6.2e %6.2e\n",lista_individuos[0].cromossomo2[i],lista_individuos[1].cromossomo2[i],filho1.cromossomo2[i],filho2.cromossomo2[i]);
    }
/*Implementação do método da roleta. o Algoritmo concede fatias relativas 
    ao fitness de cada indivíduo dentro da população. Ao final, retorna o indice
    do indivíduo selecionado para a reprodução*/
    int indice_pai = 0;
    double soma = soma_avaliacoes();
    double aptidao_relativa[TAM_POPULACAO];
    for(int i=0;i<TAM_POPULACAO;i++)
        aptidao_relativa[i] = lista_individuos[i].nota / soma;
    double valor_sorteado = ((double)rand() / RAND_MAX);

    printf("Valor sorteado %.5f\n",valor_sorteado);

    if(TAM_POPULACAO == 0){
        return -1;
    }

    while( (indice_pai<TAM_POPULACAO) && (valor_sorteado < aptidao_relativa[indice_pai]) ){
        printf("\n===== Entrou ====== ind atual %d\n",indice_pai);
        indice_pai++;
    }
    
    indice_pai = (indice_pai == TAM_POPULACAO) ? indice_pai-1 : indice_pai;
    printf("indice pai %d\n",indice_pai);
    return indice_pai;