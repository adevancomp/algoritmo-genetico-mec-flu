Avisos

void calcula_trelica(trelica* t)
   - Dependências
        void calcula_comprimento_barras(double* barras);
        

typedef struct 
    {
        
        double barras[NUM_BARRAS];
        double F[NUM_FORCAS_CARREG];
        double FN[NUM_BARRAS];
        double VFN[NUM_BARRAS];
        double A[NUM_BARRAS];
        double DY[NUM_BARRAS];
        double RAx,RAy,REy;
        double VRAx,VRAy,VREy;
        double desloc_C;
        double E;
        int tipo;
    } trelica;

----------------- Teste 1 -----------------

#include "trelica.h"
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char const *argv[])
{
    trelica t;
    double barras[] = {1, 0.5, 1, 2, 3, 7, 2};
    t.barras[5] = 1;
    t.barras[7] = 0.5;
    t.barras[9] = 1;

    t.barras[0] = 2;
    t.barras[1] = 2;
    t.barras[2] = 2;
    t.barras[3] = 2;

    for(int i=0;i<5;i++)
        t.F[i] = 10;
    
    for(int i=0;i<13;i++)
        t.A[i] = 5e-4;
    
    t.E= DEFAULT_E;
    t.tipo = calcula_tipo_trelica(&t);

    calcula_comprimento_barras(t.barras);

    calcula_trelica(&t);

    printf("Barra  A(m²)        L(m)       N(kN)     n(kN)       Delta (mm)\n");
    for(int j=0;j<13;j++)
    {
        printf("%2.d    %6.2e   %6.2e  %9.2e   %9.2e   %7.2e\n",j+1,t.A[j],t.barras[j],t.FN[j],t.VFN[j],t.DY[j]);
    }
    printf("Deslocamento Final: %.4f mm\n",t.desloc_C);

    printf("Caso 8\n\n");

    atualiza_barras(&t,barras);
    calcula_trelica(&t);

    printf("Barra  A(m²)        L(m)       N(kN)     n(kN)       Delta (mm)\n");
    for(int j=0;j<13;j++)
    {
        printf("%2.d    %6.2e   %6.2e  %9.2e   %9.2e   %7.2e\n",j+1,t.A[j],t.barras[j],t.FN[j],t.VFN[j],t.DY[j]);
    }
    printf("Deslocamento Final: %.4f mm\n",t.desloc_C); 
    return 0;
}

----------------- Teste 1 -----------------


----------------- Teste 2 -----------------

srand(time(NULL));
    inicia_populacao();
    for(int i=0;i<TAM_POPULACAO;i++)
        exibe_individuo(lista_individuos+i);
    /*void qsort(void* buf,size_t num, size_t size,int(*compare)(const void*,const void*))
  exemplo : qsort(num,10,sizeof(int),comp)*/
    qsort(lista_individuos,TAM_POPULACAO,sizeof(individuo),func_compara_individuos);
    printf("Ordenado\n");
    for(int i=0;i<TAM_POPULACAO;i++)
        printf("%d Nota:%f\n",i,lista_individuos[i].nota);

----------------- Teste 2 -----------------


----------------- Teste 3 -----------------

srand(time(NULL));
    inicia_populacao();
    qsort(lista_individuos,TAM_POPULACAO,sizeof(individuo),func_compara_individuos);
    copia_individuo(&melhor_individuo,lista_individuos);/*Copia o primeiro elemento da lista pra variavel melhor_individuo*/
    for(int i=0;i<QTD_GERACOES;i++)
    {
        //double soma_avaliacao = soma_avaliacoes();
        individuo nova_populacao[TAM_POPULACAO];
        int cont=0;
        for(int k=0;k<TAM_POPULACAO;k=k+2)
        {
            int indice_pai1 = selecao();
            int indice_pai2 = selecao();

            individuo filho1,filho2;

            crossover(lista_individuos+indice_pai1,lista_individuos+indice_pai2,&filho1,&filho2);
            mutacao(&filho1);
            mutacao(&filho2);
            nova_populacao[cont]=filho1;
            cont++;
            nova_populacao[cont]=filho2;
            cont++;
        }
        /*Substitui a população antiga pela nova*/
        for(int l=0;l<TAM_POPULACAO;l++)
            copia_individuo(lista_individuos+l,nova_populacao+l);
        qsort(nova_populacao,TAM_POPULACAO,sizeof(individuo),func_compara_individuos);
        copia_individuo(&melhor_individuo,lista_individuos);
        printf("geracao:%d melhor:%f\n",i,melhor_individuo.nota);
    }

----------------- Teste 3 -----------------


----------------- Teste 4 -----------------

#include "ag.h"
#include "trelica.h"
#include <time.h>
#include <stdio.h>
#include <stdlib.h>

#define HISTORICO_SOLUCOES "historico.txt"
#define MELHOR_ATUAL "melhor.txt"

extern individuo lista_individuos[TAM_POPULACAO];
extern individuo melhor_individuo;

int main(int argc, char const *argv[])
{
    srand(time(NULL));
    inicia_populacao();
    qsort(lista_individuos,TAM_POPULACAO,sizeof(individuo),func_compara_individuos);
    copia_individuo(&melhor_individuo,lista_individuos);/*Copia o primeiro elemento da lista pra variavel melhor_individuo*/
    for(int i=0;i<QTD_GERACOES;i++)
    {
        //double soma_avaliacao = soma_avaliacoes();
        individuo nova_populacao[TAM_POPULACAO];
        for(int o=0;o<TAM_POPULACAO;i++)
            nova_populacao[o].t = cria_trelica();
        int cont=0;
        for(int k=0;k<TAM_POPULACAO;k=k+2)
        {
            int indice_pai1 = selecao();
            int indice_pai2 = selecao();

            individuo filho1,filho2;

            crossover(lista_individuos+indice_pai1,lista_individuos+indice_pai2,&filho1,&filho2);
            mutacao(&filho1);
            mutacao(&filho2);
            nova_populacao[cont]=filho1;
            cont++;
            nova_populacao[cont]=filho2;
            cont++;
        }
        /*Substitui a população antiga pela nova*/
        for(int l=0;l<TAM_POPULACAO;l++)
            copia_individuo(lista_individuos+l,nova_populacao+l);
        qsort(nova_populacao,TAM_POPULACAO,sizeof(individuo),func_compara_individuos);
        copia_individuo(&melhor_individuo,lista_individuos);
        printf("geracao:%d melhor:%f\n",i,melhor_individuo.nota);
    }

    return 0;
}


----------------- Teste 4 -----------------

------------------ Teste 5 ----------------

    individuo filho1,filho2,nova_populacao[TAM_POPULACAO];
    filho1.t = cria_trelica();
    filho2.t = cria_trelica();
    for(int i=0;i<NUM_FORCAS_CARREG;i++){
        filho1.t->F[i] = F_atuais[i];
        filho2.t->F[i] = F_atuais[i];
    }
    inicia_lista(nova_populacao);/*Inicia a nova população com valores aleatórios*/
    
    srand(time(NULL));
    inicia_populacao();
    qsort(lista_individuos,TAM_POPULACAO,sizeof(individuo),func_compara_individuos);

    for(int i=0;i<QTD_GERACOES;i++)
    {
        crossover(lista_individuos+selecao(),lista_individuos+selecao(),&filho1,&filho2);
        printf("Filho 1");
        exibe_individuo(&filho1);
        printf("Filho 2");
        exibe_individuo(&filho2);
        printf("\n\n");
    }



------------------- Teste 5 ----------------